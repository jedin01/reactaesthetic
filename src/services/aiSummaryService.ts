
// This is a mock service for now, which would be replaced with actual API calls
// to an AI service in a production environment

export interface SummaryRequest {
  content: string;
  subject: string;
  title: string;
}

export interface SummaryResult {
  imageUrl: string;
  text: string;
}

// Mock function to simulate generating a summary image
const generateMockSummaryImage = (content: string, subject: string, title: string): string => {
  // Create a canvas to draw our notebook page
  const canvas = document.createElement('canvas');
  canvas.width = 800;
  canvas.height = 1000;
  const ctx = canvas.getContext('2d');
  
  if (!ctx) return '';
  
  // Background color (notebook paper)
  ctx.fillStyle = '#FEF7CD';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  
  // Draw notebook lines
  ctx.strokeStyle = '#FDE1D3';
  ctx.lineWidth = 1;
  for (let y = 40; y < canvas.height; y += 30) {
    ctx.beginPath();
    ctx.moveTo(0, y);
    ctx.lineTo(canvas.width, y);
    ctx.stroke();
  }
  
  // Draw red margin
  ctx.strokeStyle = 'rgba(255, 0, 0, 0.2)';
  ctx.lineWidth = 2;
  ctx.beginPath();
  ctx.moveTo(60, 0);
  ctx.lineTo(60, canvas.height);
  ctx.stroke();
  
  // Draw the title
  ctx.fillStyle = '#333';
  ctx.font = 'bold 32px Arial, sans-serif';
  ctx.fillText(title, 80, 60);
  
  // Draw the subject
  ctx.font = 'italic 22px Arial, sans-serif';
  ctx.fillStyle = '#555';
  ctx.fillText(subject, 80, 100);
  
  // Draw a line under the title
  ctx.strokeStyle = '#333';
  ctx.lineWidth = 1;
  ctx.beginPath();
  ctx.moveTo(80, 110);
  ctx.lineTo(700, 110);
  ctx.stroke();
  
  // Draw the content
  ctx.font = '18px Courier, monospace';
  ctx.fillStyle = '#333';
  
  // Wrap text to fit the page width
  const wrapText = (text: string, x: number, y: number, maxWidth: number, lineHeight: number) => {
    const words = text.split(' ');
    let line = '';
    let testLine = '';
    let lineY = y;
    
    for (let n = 0; n < words.length; n++) {
      testLine = line + words[n] + ' ';
      const metrics = ctx.measureText(testLine);
      const testWidth = metrics.width;
      
      if (testWidth > maxWidth && n > 0) {
        ctx.fillText(line, x, lineY);
        line = words[n] + ' ';
        lineY += lineHeight;
      } else {
        line = testLine;
      }
    }
    
    ctx.fillText(line, x, lineY);
    return lineY;
  };
  
  // "AI summarized" content - for now we'll just use the original content
  // In a real application, this would be processed by an AI
  let processedContent = "AI Summary:\n\n";
  processedContent += content;
  
  wrapText(processedContent, 80, 150, 650, 30);
  
  // Add a watermark
  ctx.font = 'italic 12px Arial, sans-serif';
  ctx.fillStyle = 'rgba(100, 100, 100, 0.5)';
  ctx.fillText('Generated by Studyable AI', canvas.width - 200, canvas.height - 20);
  
  // Convert canvas to data URL
  return canvas.toDataURL('image/png');
};

export const generateSummary = async (request: SummaryRequest): Promise<SummaryResult> => {
  // In a real app, this would call an external AI API
  console.log('Generating summary for:', request);
  
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 1500));
  
  // Generate mock image
  const imageUrl = generateMockSummaryImage(request.content, request.subject, request.title);
  
  return {
    imageUrl,
    text: `AI summarized content for "${request.title}"`
  };
};
